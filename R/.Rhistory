)
x_pos_lenient <- list(
"4 week" = pos_hits_4week_lenient$id,
"6 week" = pos_hits_6week_lenient$id,
"time replicates" = pos_hits_time_replicates_lenient$id,
"Perfusion" = pos_hits_PERF_lenient$id,
"Shake-Flask" = pos_hits_SF_lenient$id
)
# Plot margin adjustment to prevent label cutoff
plot_margins <- 0.3
# Venn diagram for negative (depleted) hits using lenient criteria
venn_neg_lenient <- venn.diagram(
x = x_neg_lenient,
category.names = names(x_neg_lenient),
filename = NULL,
output = TRUE,
main = "Depleted Genes (Lenient Criteria)",
col = "black",
fill = colors_alpha,
cat.fontfamily = "Arial",
fontfamily = "Arial",
main.fontfamily = "Arial",
main.cex = 1.5,
margin = plot_margins
)
# Render the Venn diagram for lenient negative hits
grid.newpage()
grid.draw(venn_neg_lenient)
# Venn diagram for positive (enriched) hits using lenient criteria
venn_pos_lenient <- venn.diagram(
x = x_pos_lenient,
category.names = names(x_pos_lenient),
filename = NULL,
output = TRUE,
main = "Enriched Genes (Lenient Criteria)",
col = "black",
fill = colors_alpha,
cat.fontfamily = "Arial",
fontfamily = "Arial",
main.fontfamily = "Arial",
main.cex = 1.5,
margin = plot_margins
)
# Render the Venn diagram for lenient positive hits
grid.newpage()
grid.draw(venn_pos_lenient)
######################## FastCHO Figure #########################
# CHO-screen color palette (with alpha)
venn_colors <- c(
"4 week"          = "#ff7f0e80",  # Orange
"6 week"          = "#1f77b480",  # Deep Blue
"Time Replicates" = "#17becf80",  # Teal
"Perfusion"       = "#d6272880",  # Red
"Shake-Flask"     = "#7f7f7f80"   # Gray
)
# Function to draw Venn without built-in title
draw_venn_no_title <- function(gene_list, fill_colors) {
venn_plot <- venn.diagram(
x = gene_list,
category.names = names(gene_list),
filename = NULL,
output = TRUE,
fill = fill_colors,
col = "black",
cex = 1.4,
cat.cex = 1.8,
cat.fontfamily = "Arial",
cat.fontface = "bold",
fontfamily = "Arial",
cat.col = "black",
cat.pos = c(-10, 210, -145, 40, 125),
cat.dist = c(0.23, 0.23, 0.23, 0.23, 0.26),
main = NULL,
margin = 0.4
)
grid.newpage()
grid.draw(venn_plot)
}
# Export: Depleted Genes Venn
png("depleted_genes_venn_final.png",
width = 2600, height = 2400, units = "px", res = 300)
par(mai = c(1.5, 1, 1, 1))  # Bottom margin to avoid label cutoff
draw_venn_no_title(x_neg_lenient, venn_colors)
grid.text("Depleted Genes", x = 0.5, y = 0.92,
gp = gpar(fontsize = 22, fontface = "bold", family = "Arial"))
dev.off()
# Export: Enriched Genes Venn
png("enriched_genes_venn_final.png",
width = 2600, height = 2400, units = "px", res = 300)
par(mai = c(1.5, 1, 1, 1))
draw_venn_no_title(x_pos_lenient, venn_colors)
grid.text("Enriched Genes", x = 0.5, y = 0.92,
gp = gpar(fontsize = 22, fontface = "bold", family = "Arial"))
dev.off()
# Function to get hit gene names based on lenient FDR and p-value thresholds
get_hits_lenient <- function(df) {
neg_hits <- df %>%
filter(neg.fdr < 0.05 | (neg.p.value < 0.025 & neg.lfc < 0)) %>%
dplyr::select(id, everything())
pos_hits <- df %>%
filter(pos.fdr < 0.05 | (pos.p.value < 0.025 & pos.lfc > 1)) %>%
dplyr::select(id, everything())
return(list(neg_hits = neg_hits, pos_hits = pos_hits))
}
# Apply the lenient hit selection function to each dataset in mageck_results_list
hit_names_list_lenient <- lapply(mageck_results_list, get_hits_lenient)
# Extract lists of negative and positive hits for each time point (including "2 week")
neg_hits_2week_lenient <- hit_names_list_lenient[[1]]$neg_hits
neg_hits_4week_lenient <- hit_names_list_lenient[[2]]$neg_hits
neg_hits_6week_lenient <- hit_names_list_lenient[[3]]$neg_hits
neg_hits_time_replicates_lenient <- hit_names_list_lenient[[4]]$neg_hits
neg_hits_PERF_lenient <- hit_names_list_lenient[[5]]$neg_hits
neg_hits_SF_lenient <- hit_names_list_lenient[[6]]$neg_hits
pos_hits_2week_lenient <- hit_names_list_lenient[[1]]$pos_hits
pos_hits_4week_lenient <- hit_names_list_lenient[[2]]$pos_hits
pos_hits_6week_lenient <- hit_names_list_lenient[[3]]$pos_hits
pos_hits_time_replicates_lenient <- hit_names_list_lenient[[4]]$pos_hits
pos_hits_PERF_lenient <- hit_names_list_lenient[[5]]$pos_hits
pos_hits_SF_lenient <- hit_names_list_lenient[[6]]$pos_hits
# Define functions for calculating common hits, hits in at least two comparisons, and all unique hits
get_common_ids <- function(ids_list) Reduce(intersect, ids_list)
get_at_least_two_ids <- function(ids_list) names(table(unlist(ids_list))[table(unlist(ids_list)) >= 2])
get_all_unique_ids <- function(ids_list) unique(unlist(ids_list))
# Define a list of IDs for negative and positive hits, including "2 week"
neg_hits_list_lenient <- list(
neg_hits_2week_lenient$id, neg_hits_4week_lenient$id, neg_hits_6week_lenient$id,
neg_hits_time_replicates_lenient$id, neg_hits_PERF_lenient$id, neg_hits_SF_lenient$id
)
pos_hits_list_lenient <- list(
pos_hits_2week_lenient$id, pos_hits_4week_lenient$id, pos_hits_6week_lenient$id,
pos_hits_time_replicates_lenient$id, pos_hits_PERF_lenient$id, pos_hits_SF_lenient$id
)
# Calculate common, at-least-two, and unique hits for lenient criteria
common_neg_hits_all_lenient <- get_common_ids(neg_hits_list_lenient)
common_pos_hits_all_lenient <- get_common_ids(pos_hits_list_lenient)
at_least_two_neg_hits_lenient <- get_at_least_two_ids(neg_hits_list_lenient)
at_least_two_pos_hits_lenient <- get_at_least_two_ids(pos_hits_list_lenient)
all_unique_neg_hits_lenient <- get_all_unique_ids(neg_hits_list_lenient)
all_unique_pos_hits_lenient <- get_all_unique_ids(pos_hits_list_lenient)
# Function to rename columns with a suffix
rename_hits <- function(df, suffix) df %>% rename_with(~ paste0(., suffix), -id)
# Rename columns for each comparison in the lenient set for both negative and positive hits
neg_hits_renamed_lenient <- list(
rename_hits(neg_hits_2week_lenient, "_neg_hits_2week"),
rename_hits(neg_hits_4week_lenient, "_neg_hits_4week"),
rename_hits(neg_hits_6week_lenient, "_neg_hits_6week"),
rename_hits(neg_hits_time_replicates_lenient, "_neg_hits_time_replicates"),
rename_hits(neg_hits_PERF_lenient, "_neg_hits_PERF"),
rename_hits(neg_hits_SF_lenient, "_neg_hits_SF")
)
pos_hits_renamed_lenient <- list(
rename_hits(pos_hits_2week_lenient, "_pos_hits_2week"),
rename_hits(pos_hits_4week_lenient, "_pos_hits_4week"),
rename_hits(pos_hits_6week_lenient, "_pos_hits_6week"),
rename_hits(pos_hits_time_replicates_lenient, "_pos_hits_time_replicates"),
rename_hits(pos_hits_PERF_lenient, "_pos_hits_PERF"),
rename_hits(pos_hits_SF_lenient, "_pos_hits_SF")
)
# Function to merge data frames and filter based on common hits
merge_hits <- function(common_hits, hits_list) {
merged_df <- Reduce(function(x, y) full_join(x, y, by = "id"), hits_list)
merged_df %>% filter(id %in% common_hits)
}
# Merging the data frames for each category of hits
common_pos_hits_all_df_lenient <- merge_hits(common_pos_hits_all_lenient, pos_hits_renamed_lenient)
common_neg_hits_all_df_lenient <- merge_hits(common_neg_hits_all_lenient, neg_hits_renamed_lenient)
at_least_two_pos_hits_df_lenient <- merge_hits(at_least_two_pos_hits_lenient, pos_hits_renamed_lenient)
at_least_two_neg_hits_df_lenient <- merge_hits(at_least_two_neg_hits_lenient, neg_hits_renamed_lenient)
all_unique_pos_hits_df_lenient <- merge_hits(all_unique_pos_hits_lenient, pos_hits_renamed_lenient)
all_unique_neg_hits_df_lenient <- merge_hits(all_unique_neg_hits_lenient, neg_hits_renamed_lenient)
# Function to add metadata to a data frame
add_metadata <- function(df, metadata_df) {
metadata_to_add <- metadata_df %>%
dplyr::select(`Unique Gene ID v2`, `Gene Symbol / Target Name`, `Gene Name`, `Gene Product`, `Uniprot ID`,
Gene_ID_v2, Gene_Name_v2, Product_v2, clustered_nr.hit_v2, clustered_nr.pident_v2,
alphalyse.hit_v2, alphalyse.uniprot_v2, alphalyse.pident_v2, seed_tax_id_v2,
seed_ortholog_v2, COG_category_v2, Description_v2, Preferred_name_v2,
GOs_v2, EC_v2, KEGG_ko_v2, KEGG_Pathway_v2, KEGG_Module_v2, KEGG_Reaction_v2,
KEGG_rclass_v2, BRITE_v2, KEGG_TC_v2, CAZy_v2, BiGG_Reaction_v2, PFAMs_v2
) %>%
rename(id = `Unique Gene ID v2`) %>%
distinct(id, .keep_all = TRUE)
df <- df %>%
left_join(metadata_to_add, by = "id") %>%
dplyr::select(id, `Gene Symbol / Target Name`, `Gene Name`, `Gene Product`, `Uniprot ID`,
Gene_ID_v2, Gene_Name_v2, Product_v2, clustered_nr.hit_v2, clustered_nr.pident_v2,
alphalyse.hit_v2, alphalyse.uniprot_v2, alphalyse.pident_v2, seed_tax_id_v2,
seed_ortholog_v2, COG_category_v2, Description_v2, Preferred_name_v2,
GOs_v2, EC_v2, KEGG_ko_v2, KEGG_Pathway_v2, KEGG_Module_v2, KEGG_Reaction_v2,
KEGG_rclass_v2, BRITE_v2, KEGG_TC_v2, CAZy_v2, BiGG_Reaction_v2, PFAMs_v2, everything())
return(df)
}
# Add metadata from 'ReadCountsCHOWGLV4' to each hits data frame
common_pos_hits_all_df_lenient <- add_metadata(common_pos_hits_all_df_lenient, ReadCountsCHOWGLV4)
common_neg_hits_all_df_lenient <- add_metadata(common_neg_hits_all_df_lenient, ReadCountsCHOWGLV4)
at_least_two_pos_hits_df_lenient <- add_metadata(at_least_two_pos_hits_df_lenient, ReadCountsCHOWGLV4)
at_least_two_neg_hits_df_lenient <- add_metadata(at_least_two_neg_hits_df_lenient, ReadCountsCHOWGLV4)
all_unique_pos_hits_df_lenient <- add_metadata(all_unique_pos_hits_df_lenient, ReadCountsCHOWGLV4)
all_unique_neg_hits_df_lenient <- add_metadata(all_unique_neg_hits_df_lenient, ReadCountsCHOWGLV4)
# Save the lenient results to an Excel file
output_file_lenient <- "./common_lenient_hits_summary_V2.xlsx"
wb_lenient <- createWorkbook()
# Function to add worksheet and write data
addWorksheetAndWrite <- function(wb, sheet, data) {
addWorksheet(wb, sheet)
writeData(wb, sheet = sheet, data)
}
addWorksheetAndWrite(wb_lenient, "Common_Positive_Hits_All", common_pos_hits_all_df_lenient)
addWorksheetAndWrite(wb_lenient, "Common_Negative_Hits_All", common_neg_hits_all_df_lenient)
addWorksheetAndWrite(wb_lenient, "At_Least_Two_Positive_Hits", at_least_two_pos_hits_df_lenient)
addWorksheetAndWrite(wb_lenient, "At_Least_Two_Negative_Hits", at_least_two_neg_hits_df_lenient)
addWorksheetAndWrite(wb_lenient, "All_Unique_Positive_Hits", all_unique_pos_hits_df_lenient)
addWorksheetAndWrite(wb_lenient, "All_Unique_Negative_Hits", all_unique_neg_hits_df_lenient)
# Save the workbook
saveWorkbook(wb_lenient, output_file_lenient, overwrite = TRUE)
# # Function to create kable tables
# create_kable <- function(data, caption) {
#   knitr::kable(data, caption = caption) %>%
#     kable_styling() %>%
#     scroll_box(width = "100%", height = "300px")
# }
#
# # Create and display kable tables
# common_pos_hits_all_table_lenient <- create_kable(common_pos_hits_all_df_lenient, "Table: Common Positive Hits (All Time Points, Lenient Criteria)")
# common_neg_hits_all_table_lenient <- create_kable(common_neg_hits_all_df_lenient, "Table: Common Negative Hits (All Time Points, Lenient Criteria)")
# at_least_two_pos_hits_table_lenient <- create_kable(at_least_two_pos_hits_df_lenient, "Table: Positive Hits Found in At Least Two Comparisons (Lenient Criteria)")
# at_least_two_neg_hits_table_lenient <- create_kable(at_least_two_neg_hits_df_lenient, "Table: Negative Hits Found in At Least Two Comparisons (Lenient Criteria)")
# all_unique_pos_hits_table_lenient <- create_kable(all_unique_pos_hits_df_lenient, "Table: All Unique Positive Hits (Lenient Criteria)")
# all_unique_neg_hits_table_lenient <- create_kable(all_unique_neg_hits_df_lenient, "Table: All Unique Negative Hits (Lenient Criteria)")
# Display the kable tables
# common_pos_hits_all_table_lenient
# common_neg_hits_all_table_lenient
# at_least_two_pos_hits_table_lenient
# at_least_two_neg_hits_table_lenient
# all_unique_pos_hits_table_lenient
# all_unique_neg_hits_table_lenient
# Ensure consistent preprocessing of the lenient negative hits dataframe
all_unique_neg_hits_df_lenient <- all_unique_neg_hits_df_lenient %>%
filter(!is.na(Preferred_name_v2)) %>%
mutate(Preferred_name_v2_lower = tolower(Preferred_name_v2))
# Filter the deg_data_list to exclude negative hits
filtered_deg_data_list <- deg_data_list[!(names(deg_data_list) %in% c("Negative_Hits", "Negative_Hits_Lenient"))]
# Initialize an empty list to store results
comparison_results_filtered <- list()
# Perform overlap analysis for each filtered DEG dataset
for (deg_name in names(filtered_deg_data_list)) {
deg_df <- filtered_deg_data_list[[deg_name]]
# Ensure consistent gene name processing
deg_df <- deg_df %>%
filter(!is.na(Gene_Name)) %>%
mutate(Gene_Name_lower = tolower(Gene_Name))
# Calculate overlap
overlap <- intersect(
all_unique_neg_hits_df_lenient$Preferred_name_v2_lower,
deg_df$Gene_Name_lower
)
# Compute overlap statistics
total_essentiality_genes <- nrow(deg_df)
overlap_count <- length(overlap)
fractional_overlap_essentiality <- overlap_count / total_essentiality_genes
# Create a comparison table
comparison_table <- data.frame(
Comparison = paste("DEG vs. Preferred_name_v2_lenient:", deg_name),
Total_Essentiality_Genes = total_essentiality_genes,
Overlapping_Genes = overlap_count,
Fractional_Overlap_Essentiality = fractional_overlap_essentiality
)
# Add to results list
comparison_results_filtered[[deg_name]] <- comparison_table
}
# Combine all results into a single dataframe
final_comparison_table_filtered <- bind_rows(comparison_results_filtered, .id = "DEG_Set")
# Merge metadata and generate final table
final_comparison_table_filtered <- final_comparison_table_filtered %>%
left_join(deg_metadata, by = c("DEG_Set" = "DEG_Set"))
# Generate formatted table
knitr::kable(final_comparison_table_filtered,
caption = "Table: Gene Set Overlap Analysis Results (Excluding Negative Hits)",
digits = 3,
format.args = list(big.mark = ",")) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = TRUE) %>%
scroll_box(width = "100%", height = "500px")
# Create bar plot for lenient results
ggplot(final_comparison_table_filtered,
aes(x = reorder(DEG_Set, Fractional_Overlap_Essentiality),
y = Fractional_Overlap_Essentiality)) +
geom_bar(stat = "identity", fill = "darkred") +
geom_text(aes(label = sprintf("%.3f", Fractional_Overlap_Essentiality)),
vjust = -0.5,
size = 3) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Overlap of Essential Gene Lists (Lenient Comparison)",
x = "Gene Set",
y = "Fractional Overlap") +
scale_y_continuous(labels = scales::percent)
# Add all_unique_neg_hits_df to the deg_data_list
deg_data_list[["Negative_Hits_Lenient"]] <- all_unique_neg_hits_df_lenient %>%
rename( Gene_Name= Preferred_name_v2)  # Rename to match other datasets' structure
# Include Negative_Hits and Negative_Hits_Lenient in the heatmap
set_names <- names(deg_data_list)  # All sets, including Negative_Hits and Negative_Hits_Lenient
overlap_matrix <- matrix(0,
nrow = length(set_names),
ncol = length(set_names),
dimnames = list(set_names, set_names))
# Fill matrix with pairwise overlaps
for(i in seq_along(set_names)) {
for(j in seq_along(set_names)) {
genes1 <- tolower(deg_data_list[[set_names[i]]]$Gene_Name)
genes2 <- tolower(deg_data_list[[set_names[j]]]$Gene_Name)
overlap_matrix[i,j] <- calculate_overlap(genes1, genes2)
}
}
pheatmap(overlap_matrix,
display_numbers = TRUE,
number_format = "%.1f",
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize = 14,
fontsize_row = 14,
fontsize_col = 14,
angle_col = 45,
cellheight = 20,
cellwidth = 20,
color = colorRampPalette(c("white", "darkgreen"))(100),
filename = "heatmap_output.png")
# Remove the "Negative_Hits" column and row
overlap_matrix_filtered <- overlap_matrix[!(rownames(overlap_matrix) == "Negative_Hits"),
!(colnames(overlap_matrix) == "Negative_Hits")]
# Calculate row sums and means excluding self-overlap
row_stats_filtered <- apply(overlap_matrix_filtered, 1, function(row) {
self_overlap <- row[which.max(row)]  # Identify self-overlap (diagonal element)
non_self_values <- row[row != self_overlap]  # Exclude self-overlap
list(Row_Sum = sum(non_self_values), Row_Mean = mean(non_self_values))
})
# Convert to a data frame for better presentation
row_stats_df_filtered <- data.frame(
Gene_Set = rownames(overlap_matrix_filtered),
Row_Sum = sapply(row_stats_filtered, function(x) x$Row_Sum),
Row_Mean = sapply(row_stats_filtered, function(x) x$Row_Mean)
)
# Sort the data frame by Row_Sum or Row_Mean (as needed)
row_stats_df_filtered <- row_stats_df_filtered %>%
arrange(desc(Row_Sum))  # You can also sort by `Row_Mean` if needed
# Display the results
print(row_stats_df_filtered)
# Rename and filter rows/columns in overlap_matrix
renamed_matrix <- overlap_matrix
# Rename specific row and column names
rownames(renamed_matrix) <- colnames(renamed_matrix) <- gsub("Essentiality_CRISPR", "Xiong et al.", rownames(renamed_matrix))
rownames(renamed_matrix) <- colnames(renamed_matrix) <- gsub("Negative_Hits_Lenient", "CHO_EG2025", rownames(renamed_matrix))
# Remove unwanted entries
remove_sets <- c("Negative_Hits", "Negative_Hits_Weighed_Final")
renamed_matrix <- renamed_matrix[!rownames(renamed_matrix) %in% remove_sets,
!colnames(renamed_matrix) %in% remove_sets]
pheatmap(renamed_matrix,
display_numbers = TRUE,
number_format = "%.1f",
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize = 12,
fontsize_row = 12,
fontsize_col = 12,
angle_col = 45,
cellheight = 20,
cellwidth = 20,
color = colorRampPalette(c("white", "darkgreen"))(100),
filename = "heatmap_output.png")
# Remove specific DEG sets before calculating stats
filtered_matrix <- renamed_matrix[!rownames(renamed_matrix) %in% c("DEG2010", "DEG2005", "DEG2006"),
!colnames(renamed_matrix) %in% c("DEG2010", "DEG2005", "DEG2006")]
# Calculate row sums and means excluding self-overlap
row_stats_filtered <- apply(filtered_matrix, 1, function(row) {
self_overlap <- row[which.max(row)]  # Assume diagonal is the max (self-overlap)
non_self_values <- row[row != self_overlap]
list(Row_Sum = sum(non_self_values), Row_Mean = mean(non_self_values))
})
# Convert to a data frame
row_stats_df_filtered <- data.frame(
Gene_Set = rownames(filtered_matrix),
Row_Sum = sapply(row_stats_filtered, function(x) x$Row_Sum),
Row_Mean = sapply(row_stats_filtered, function(x) x$Row_Mean)
)
# Sort the results by Row_Sum (or Row_Mean)
row_stats_df_filtered <- row_stats_df_filtered %>%
arrange(desc(Row_Sum))
# Display the final table
print(row_stats_df_filtered)
# Write to Excel
#write_xlsx(row_stats_df_filtered, "CHO_Essential_Gene_Overlap_Summary.xlsx")
pheatmap(filtered_matrix,
display_numbers = TRUE,
number_format = "%.1f",
cluster_rows = TRUE,
cluster_cols = TRUE,
fontsize = 12,
fontsize_row = 12,
fontsize_col = 12,
angle_col = 45,
cellheight = 20,
cellwidth = 20,
color = colorRampPalette(c("white", "#17becf"))(100),
filename = "heatmap_output_cleaned.png")
# Step 1: Rename CHO_EG2025 to "This Study"
rownames(renamed_matrix)[rownames(renamed_matrix) == "CHO_EG2025"] <- "This Study"
colnames(renamed_matrix)[colnames(renamed_matrix) == "CHO_EG2025"] <- "This Study"
filtered_matrix <- renamed_matrix
# # Step 2: Remove unwanted DEG sets
# filtered_matrix <- renamed_matrix[!rownames(renamed_matrix) %in% c("DEG2010", "DEG2005", "DEG2006"),
#                                   !colnames(renamed_matrix) %in% c("DEG2010", "DEG2005", "DEG2006")]
# # Step 3: Compute row means (excluding self-overlap)
# row_stats_filtered <- apply(filtered_matrix, 1, function(row) {
#   self_overlap <- max(row)  # assumes self-overlap is the max value
#   non_self_values <- row[row != self_overlap]
#   mean(non_self_values)
# })
# # Reorder columns manually (optional)
# custom_order <- c("DEG2005", "DEG2025",
#                   "DEG2006", "DEG2010", "DEG2011",
#                   "DEG2012", "DEG2013", "DEG2014", "DEG2015", "DEG2016", "DEG2017",
#                   "DEG2018", "DEG2019", "DEG2020", "DEG2021", "DEG2022", "DEG2023",
#                   "DEG2024", "DEG2026", "DEG2029", "DEG2032", "DEG2033", "This Study", "Xiong et al.")
# Reorder matrix
filtered_matrix <- filtered_matrix[, custom_order]
# Create a named vector for each annotation
organism_vector <- c(
"DEG2005" = "Mouse", "DEG2025" = "Mouse",
"DEG2006" = "Human", "DEG2010" = "Human", "DEG2011" = "Human",
"DEG2012" = "Human", "DEG2013" = "Human", "DEG2014" = "Human", "DEG2015" = "Human",
"DEG2016" = "Human", "DEG2017" = "Human", "DEG2018" = "Human", "DEG2019" = "Human",
"DEG2020" = "Human", "DEG2021" = "Human", "DEG2022" = "Human", "DEG2023" = "Human",
"DEG2024" = "Human", "DEG2026" = "Human", "DEG2029" = "Human",
"DEG2032" = "Human", "DEG2033" = "Human",
"Xiong et al." = "CHO", "This Study" = "CHO"
)
method_vector <- c(
"DEG2005" = "KO (Organism)", "DEG2025" = "KO (Organism)",
"DEG2006" = "CompGen (In Silico)", "DEG2010" = "CompGen (In Silico)",
"DEG2011" = "Variant Constraint (In Silico)",
"DEG2012" = "CRISPR (Cellular)", "DEG2013" = "CRISPR (Cellular)",
"DEG2014" = "CRISPR (Cellular)", "DEG2015" = "CRISPR (Cellular)",
"DEG2016" = "CRISPR (Cellular)", "DEG2017" = "CRISPR (Cellular)",
"DEG2018" = "CRISPR (Cellular)", "DEG2019" = "CRISPR (Cellular)",
"DEG2020" = "CRISPR (Cellular)", "DEG2021" = "CRISPR (Cellular)",
"DEG2022" = "CRISPR (Cellular)", "DEG2023" = "CRISPR (Cellular)",
"DEG2024" = "CRISPR (Cellular)", "DEG2026" = "CRISPR (Cellular)",
"DEG2029" = "CRISPR (Cellular)", "DEG2032" = "CRISPR (Cellular)",
"DEG2033" = "CRISPR (Cellular)",
"Xiong et al." = "CRISPR (Cellular)", "This Study" = "CRISPR (Cellular)"
)
# Build annotation data frame based on actual column names
annotation_df <- data.frame(
Organism = organism_vector[colnames(filtered_matrix)],
Method = method_vector[colnames(filtered_matrix)]
)
rownames(annotation_df) <- colnames(filtered_matrix)
annotation_colors <- list(
Organism = c(
"CHO" = "#ff7f0e",     # Light Blue
"Human" = "#aec7e8",   # Orange
"Mouse" = "#1f77b4"    # Deep Blue
),
Method = c(
"CRISPR (Cellular)" = "#17becf",                         # Teal
"KO (Organism)" = "#d62728",                             # Red
"Variant Constraint (In Silico)" = "#7f7f7f",            # Gray
"CompGen (In Silico)" = "#aec7e8"                        # Light Blue
)
)
pheatmap(
filtered_matrix,
annotation_col = annotation_df,
annotation_colors = annotation_colors,
cluster_cols = TRUE,
cluster_rows = TRUE,
display_numbers = TRUE,
number_format = "%.1f",
fontsize = 12,
fontsize_row = 12,
fontsize_col = 12,
cellheight = 20,
cellwidth = 20,
color = colorRampPalette(c("white", "#17becf"))(100),
filename = "cleaned_heatmap_custom_colors.png",
width = 12,
height = 10
)
# Define DEG sets to exclude
exclude_sets <- c("DEG2005", "DEG2006", "DEG2010", "DEG2011", "DEG2025", "DEG2029")
# Subset the matrix
filtered_matrix_v2 <- filtered_matrix[!rownames(filtered_matrix) %in% exclude_sets,
!colnames(filtered_matrix) %in% exclude_sets]
# Calculate row-wise stats excluding self-overlap
row_stats_v2 <- apply(filtered_matrix_v2, 1, function(row) {
self_overlap <- max(row, na.rm = TRUE)  # diagonal value
non_self_values <- row[row != self_overlap]
list(Row_Sum = sum(non_self_values), Row_Mean = mean(non_self_values))
})
# Convert to data frame
row_stats_df_v2 <- data.frame(
Gene_Set = rownames(filtered_matrix_v2),
Row_Sum = sapply(row_stats_v2, function(x) x$Row_Sum),
Row_Mean = sapply(row_stats_v2, function(x) x$Row_Mean)
)
# Sort by Row_Sum (or Row_Mean)
row_stats_df_v2 <- row_stats_df_v2 %>%
arrange(desc(Row_Sum))
# Display result
print(row_stats_df_v2)
# Optional: save to Excel
openxlsx::write.xlsx(row_stats_df_v2, file = "CHO_Essential_Gene_Overlap_Summary_v2.xlsx", overwrite = TRUE)
